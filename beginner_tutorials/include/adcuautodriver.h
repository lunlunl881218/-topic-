// Generated by gencpp from file beginner_tutorials/adcuautodriver.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_ADCUAUTODRIVER_H
#define BEGINNER_TUTORIALS_MESSAGE_ADCUAUTODRIVER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct adcuautodriver_
{
  typedef adcuautodriver_<ContainerAllocator> Type;

  adcuautodriver_()
    : id(0)
    , crc8(0)
    , cnt(0)
    , enable(0)
    , engage(0)  {
    }
  adcuautodriver_(const ContainerAllocator& _alloc)
    : id(0)
    , crc8(0)
    , cnt(0)
    , enable(0)
    , engage(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef uint8_t _crc8_type;
  _crc8_type crc8;

   typedef int8_t _cnt_type;
  _cnt_type cnt;

   typedef int8_t _enable_type;
  _enable_type enable;

   typedef int8_t _engage_type;
  _engage_type engage;





  typedef boost::shared_ptr< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> const> ConstPtr;

}; // struct adcuautodriver_

typedef ::beginner_tutorials::adcuautodriver_<std::allocator<void> > adcuautodriver;

typedef boost::shared_ptr< ::beginner_tutorials::adcuautodriver > adcuautodriverPtr;
typedef boost::shared_ptr< ::beginner_tutorials::adcuautodriver const> adcuautodriverConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::adcuautodriver_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::adcuautodriver_<ContainerAllocator1> & lhs, const ::beginner_tutorials::adcuautodriver_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.crc8 == rhs.crc8 &&
    lhs.cnt == rhs.cnt &&
    lhs.enable == rhs.enable &&
    lhs.engage == rhs.engage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::adcuautodriver_<ContainerAllocator1> & lhs, const ::beginner_tutorials::adcuautodriver_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7f71e583ed67bdd6029d689bc6e5d21";
  }

  static const char* value(const ::beginner_tutorials::adcuautodriver_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7f71e583ed67bddULL;
  static const uint64_t static_value2 = 0x6029d689bc6e5d21ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/adcuautodriver";
  }

  static const char* value(const ::beginner_tutorials::adcuautodriver_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"uint8 crc8\n"
"byte cnt\n"
"byte enable\n"
"byte engage\n"
;
  }

  static const char* value(const ::beginner_tutorials::adcuautodriver_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.crc8);
      stream.next(m.cnt);
      stream.next(m.enable);
      stream.next(m.engage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct adcuautodriver_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::adcuautodriver_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::adcuautodriver_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "crc8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.crc8);
    s << indent << "cnt: ";
    Printer<int8_t>::stream(s, indent + "  ", v.cnt);
    s << indent << "enable: ";
    Printer<int8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "engage: ";
    Printer<int8_t>::stream(s, indent + "  ", v.engage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_ADCUAUTODRIVER_H
