/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.2.0 Tue Mar 14 13:18:13 2023.
 */

#ifndef PCAN_H19_E_H
#define PCAN_H19_E_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define PCAN_H19_E_TSC1_ACC_FRAME_ID (0xc00002au)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_FRAME_ID (0xcff649eu)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_FRAME_ID (0xcff64dcu)
#define PCAN_H19_E_COMMAND_ADCU_FRAME_ID (0xcff659eu)
#define PCAN_H19_E_AD_MODE_VECU_FRAME_ID (0x18ff6931u)
#define PCAN_H19_E_DM1_VECU_FRAME_ID (0x18feca31u)
#define PCAN_H19_E_DM1_EECU_FRAME_ID (0x18feca00u)
#define PCAN_H19_E_EEC1_FRAME_ID (0xcf00400u)
#define PCAN_H19_E_EEC2_VECU_FRAME_ID (0xcf00331u)
#define PCAN_H19_E_EEC3_FRAME_ID (0x18fedf00u)
#define PCAN_H19_E_EC1_EECU_FRAME_ID (0x18fee300u)
#define PCAN_H19_E_TPCM_E_EECU_FRAME_ID (0x18ecff00u)
#define PCAN_H19_E_TPDT_E_EECU_FRAME_ID (0x18ebff00u)
#define PCAN_H19_E_CCVS_VECU_FRAME_ID (0x18fef100u)
#define PCAN_H19_E_RQST_ADECU_FRAME_ID (0x18eaff9eu)
#define PCAN_H19_E_VIN_EECU_FRAME_ID (0x18feec00u)
#define PCAN_H19_E_ETC1_TCU_FRAME_ID (0xcf00203u)
#define PCAN_H19_E_ETC2_TCU_FRAME_ID (0x18f00503u)
#define PCAN_H19_E_ETC7_TCU_FRAME_ID (0x18fe4a03u)
#define PCAN_H19_E_TSC1_TE_TCU_FRAME_ID (0xc000003u)
#define PCAN_H19_E_DM1_TCU_FRAME_ID (0x18feca03u)
#define PCAN_H19_E_XBR_ADCU_FRAME_ID (0xc040b9eu)
#define PCAN_H19_E_STATE_SCU_FRAME_ID (0xcff6705u)
#define PCAN_H19_E_TC1_SCU_FRAME_ID (0xc010005u)
#define PCAN_H19_E_VEP8_IBS1_FRAME_ID (0x18fc0999u)
#define PCAN_H19_E_IBSW_IBS1_FRAME_ID (0x18ff7299u)
#define PCAN_H19_E_VEP8_IBS2_FRAME_ID (0x18fc0998u)
#define PCAN_H19_E_IBSW_IBS2_FRAME_ID (0x18ff7298u)

/* Frame lengths in bytes. */
#define PCAN_H19_E_TSC1_ACC_LENGTH (8u)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_LENGTH (8u)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_LENGTH (8u)
#define PCAN_H19_E_COMMAND_ADCU_LENGTH (8u)
#define PCAN_H19_E_AD_MODE_VECU_LENGTH (8u)
#define PCAN_H19_E_DM1_VECU_LENGTH (8u)
#define PCAN_H19_E_DM1_EECU_LENGTH (8u)
#define PCAN_H19_E_EEC1_LENGTH (8u)
#define PCAN_H19_E_EEC2_VECU_LENGTH (8u)
#define PCAN_H19_E_EEC3_LENGTH (8u)
#define PCAN_H19_E_EC1_EECU_LENGTH (40u)
#define PCAN_H19_E_TPCM_E_EECU_LENGTH (8u)
#define PCAN_H19_E_TPDT_E_EECU_LENGTH (8u)
#define PCAN_H19_E_CCVS_VECU_LENGTH (8u)
#define PCAN_H19_E_RQST_ADECU_LENGTH (8u)
#define PCAN_H19_E_VIN_EECU_LENGTH (14u)
#define PCAN_H19_E_ETC1_TCU_LENGTH (8u)
#define PCAN_H19_E_ETC2_TCU_LENGTH (8u)
#define PCAN_H19_E_ETC7_TCU_LENGTH (8u)
#define PCAN_H19_E_TSC1_TE_TCU_LENGTH (8u)
#define PCAN_H19_E_DM1_TCU_LENGTH (8u)
#define PCAN_H19_E_XBR_ADCU_LENGTH (8u)
#define PCAN_H19_E_STATE_SCU_LENGTH (8u)
#define PCAN_H19_E_TC1_SCU_LENGTH (8u)
#define PCAN_H19_E_VEP8_IBS1_LENGTH (8u)
#define PCAN_H19_E_IBSW_IBS1_LENGTH (8u)
#define PCAN_H19_E_VEP8_IBS2_LENGTH (8u)
#define PCAN_H19_E_IBSW_IBS2_LENGTH (8u)

/* Extended or standard frame types. */
#define PCAN_H19_E_TSC1_ACC_IS_EXTENDED (1)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_IS_EXTENDED (1)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_IS_EXTENDED (1)
#define PCAN_H19_E_COMMAND_ADCU_IS_EXTENDED (1)
#define PCAN_H19_E_AD_MODE_VECU_IS_EXTENDED (1)
#define PCAN_H19_E_DM1_VECU_IS_EXTENDED (1)
#define PCAN_H19_E_DM1_EECU_IS_EXTENDED (1)
#define PCAN_H19_E_EEC1_IS_EXTENDED (1)
#define PCAN_H19_E_EEC2_VECU_IS_EXTENDED (1)
#define PCAN_H19_E_EEC3_IS_EXTENDED (1)
#define PCAN_H19_E_EC1_EECU_IS_EXTENDED (1)
#define PCAN_H19_E_TPCM_E_EECU_IS_EXTENDED (1)
#define PCAN_H19_E_TPDT_E_EECU_IS_EXTENDED (1)
#define PCAN_H19_E_CCVS_VECU_IS_EXTENDED (1)
#define PCAN_H19_E_RQST_ADECU_IS_EXTENDED (1)
#define PCAN_H19_E_VIN_EECU_IS_EXTENDED (1)
#define PCAN_H19_E_ETC1_TCU_IS_EXTENDED (1)
#define PCAN_H19_E_ETC2_TCU_IS_EXTENDED (1)
#define PCAN_H19_E_ETC7_TCU_IS_EXTENDED (1)
#define PCAN_H19_E_TSC1_TE_TCU_IS_EXTENDED (1)
#define PCAN_H19_E_DM1_TCU_IS_EXTENDED (1)
#define PCAN_H19_E_XBR_ADCU_IS_EXTENDED (1)
#define PCAN_H19_E_STATE_SCU_IS_EXTENDED (1)
#define PCAN_H19_E_TC1_SCU_IS_EXTENDED (1)
#define PCAN_H19_E_VEP8_IBS1_IS_EXTENDED (1)
#define PCAN_H19_E_IBSW_IBS1_IS_EXTENDED (1)
#define PCAN_H19_E_VEP8_IBS2_IS_EXTENDED (1)
#define PCAN_H19_E_IBSW_IBS2_IS_EXTENDED (1)

/* Frame cycle times in milliseconds. */
#define PCAN_H19_E_TSC1_ACC_CYCLE_TIME_MS (10u)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_CYCLE_TIME_MS (20u)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_CYCLE_TIME_MS (20u)
#define PCAN_H19_E_COMMAND_ADCU_CYCLE_TIME_MS (10u)
#define PCAN_H19_E_AD_MODE_VECU_CYCLE_TIME_MS (100u)
#define PCAN_H19_E_DM1_VECU_CYCLE_TIME_MS (1000u)
#define PCAN_H19_E_DM1_EECU_CYCLE_TIME_MS (1000u)
#define PCAN_H19_E_EEC1_CYCLE_TIME_MS (20u)
#define PCAN_H19_E_EEC2_VECU_CYCLE_TIME_MS (50u)
#define PCAN_H19_E_EEC3_CYCLE_TIME_MS (20u)
#define PCAN_H19_E_EC1_EECU_CYCLE_TIME_MS (5000u)
#define PCAN_H19_E_TPCM_E_EECU_CYCLE_TIME_MS (5000u)
#define PCAN_H19_E_TPDT_E_EECU_CYCLE_TIME_MS (50u)
#define PCAN_H19_E_CCVS_VECU_CYCLE_TIME_MS (100u)
#define PCAN_H19_E_ETC1_TCU_CYCLE_TIME_MS (10u)
#define PCAN_H19_E_ETC2_TCU_CYCLE_TIME_MS (100u)
#define PCAN_H19_E_ETC7_TCU_CYCLE_TIME_MS (100u)
#define PCAN_H19_E_TSC1_TE_TCU_CYCLE_TIME_MS (10u)
#define PCAN_H19_E_DM1_TCU_CYCLE_TIME_MS (1000u)
#define PCAN_H19_E_XBR_ADCU_CYCLE_TIME_MS (20u)
#define PCAN_H19_E_STATE_SCU_CYCLE_TIME_MS (50u)
#define PCAN_H19_E_TC1_SCU_CYCLE_TIME_MS (50u)
#define PCAN_H19_E_VEP8_IBS1_CYCLE_TIME_MS (1000u)
#define PCAN_H19_E_IBSW_IBS1_CYCLE_TIME_MS (1000u)
#define PCAN_H19_E_VEP8_IBS2_CYCLE_TIME_MS (1000u)
#define PCAN_H19_E_IBSW_IBS2_CYCLE_TIME_MS (1000u)

/* Signal choices. */
#define PCAN_H19_E_TSC1_ACC_ENG_OVERRIDE_CTRL_MODE_OVERRIDE_DISABLED_CHOICE (0u)
#define PCAN_H19_E_TSC1_ACC_ENG_OVERRIDE_CTRL_MODE_SPEED_CONTROL_CHOICE (1u)
#define PCAN_H19_E_TSC1_ACC_ENG_OVERRIDE_CTRL_MODE_TORQUE_CONTROL_CHOICE (2u)
#define PCAN_H19_E_TSC1_ACC_ENG_OVERRIDE_CTRL_MODE_SPEED_TORQUE_LIMIT_CONTROL_CHOICE (3u)

#define PCAN_H19_E_TSC1_ACC_ENG_REQUESTED_SPEED_CTRL_CONDITIONS_TRANSIENT__OPTIMIZED_FOR_DRIVELINE_DISENGAGED_AND_NON_LOCKUP_CONDITIONS_CHOICE (0u)
#define PCAN_H19_E_TSC1_ACC_ENG_REQUESTED_SPEED_CTRL_CONDITIONS_STABILITY__OPTIMIZED_FOR_DRIVELINE_DISENGAGED_AND_NON_LOCKUP_CONDITIONS_CHOICE (1u)
#define PCAN_H19_E_TSC1_ACC_ENG_REQUESTED_SPEED_CTRL_CONDITIONS_STABILITY__OPTIMIZED_FOR_DRIVELINE_ENGAGED_AND_OR_IN_LOCKUP_CONDITION_1_CHOICE (2u)
#define PCAN_H19_E_TSC1_ACC_ENG_REQUESTED_SPEED_CTRL_CONDITIONS_STABILITY__OPTIMIZED_FOR_DRIVELINE_ENGAGED_AND_OR_IN_LOCKUP_CONDITION_2_CHOICE (3u)

#define PCAN_H19_E_TSC1_ACC_OVERRIDE_CTRL_MODE_PRIORITY_HIGHEST_PRIORITY_CHOICE (0u)
#define PCAN_H19_E_TSC1_ACC_OVERRIDE_CTRL_MODE_PRIORITY_HIGH_PRIORITY_CHOICE (1u)
#define PCAN_H19_E_TSC1_ACC_OVERRIDE_CTRL_MODE_PRIORITY_MEDIUM_PRIORITY_CHOICE (2u)
#define PCAN_H19_E_TSC1_ACC_OVERRIDE_CTRL_MODE_PRIORITY_LOW_PRIORITY_CHOICE (3u)

#define PCAN_H19_E_TSC1_ACC_TSC1_TRANS_RATE_1000_MS_TRANSMISSION_RATE_CHOICE (0u)
#define PCAN_H19_E_TSC1_ACC_TSC1_TRANS_RATE_750_MS_TRANSMISSION_RATE_CHOICE (1u)
#define PCAN_H19_E_TSC1_ACC_TSC1_TRANS_RATE_500_MS_TRANSMISSION_RATE_CHOICE (2u)
#define PCAN_H19_E_TSC1_ACC_TSC1_TRANS_RATE_250_MS_TRANSMISSION_RATE_CHOICE (3u)
#define PCAN_H19_E_TSC1_ACC_TSC1_TRANS_RATE_100_MS_TRANSMISSION_RATE_CHOICE (4u)
#define PCAN_H19_E_TSC1_ACC_TSC1_TRANS_RATE_50_MS_TRANSMISSION_RATE_CHOICE (5u)
#define PCAN_H19_E_TSC1_ACC_TSC1_TRANS_RATE_20_MS_TRANSMISSION_RATE_CHOICE (6u)
#define PCAN_H19_E_TSC1_ACC_TSC1_TRANS_RATE_USE_STANDARD_TSC1_TRANSMISSION_RATES_OF_10_MS_TO_ENGINE_CHOICE (7u)

#define PCAN_H19_E_TSC1_ACC_TSC1_CTRL_PURPOSE_P1____ACCELERATOR__PEDAL__OPERATOR__SELECTION_CHOICE (0u)
#define PCAN_H19_E_TSC1_ACC_TSC1_CTRL_PURPOSE_P2____CRUISE__CONTROL_CHOICE (1u)
#define PCAN_H19_E_TSC1_ACC_TSC1_CTRL_PURPOSE_P3___PTO__GOVERNOR_CHOICE (2u)
#define PCAN_H19_E_TSC1_ACC_TSC1_CTRL_PURPOSE_P4____ROAD__SPEED__GOVERNOR_CHOICE (3u)
#define PCAN_H19_E_TSC1_ACC_TSC1_CTRL_PURPOSE_P5____ENGINE__PROTECTION_CHOICE (4u)
#define PCAN_H19_E_TSC1_ACC_TSC1_CTRL_PURPOSE_P6____TRANSIENT__OPTIMIZED__TORQUE__LIMIT_CHOICE (5u)
#define PCAN_H19_E_TSC1_ACC_TSC1_CTRL_PURPOSE_P32____TEMPORARY__POWER__TRAIN__CONTROL_CHOICE (31u)

#define PCAN_H19_E_TSC1_ACC_ENG_REQUESTED_TORQUE_HIGH_RESOLUTION__0_000__CHOICE (0u)
#define PCAN_H19_E_TSC1_ACC_ENG_REQUESTED_TORQUE_HIGH_RESOLUTION__0_125__CHOICE (1u)
#define PCAN_H19_E_TSC1_ACC_ENG_REQUESTED_TORQUE_HIGH_RESOLUTION__0_875__CHOICE (7u)

#define PCAN_H19_E_AUTO_DRIVE_ADCU_AD_MODE_ENABLE_INHIBIT_CHOICE (0u)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_AD_MODE_ENABLE_ENABLE_CHOICE (1u)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_AD_MODE_ENABLE_FAIL_CHOICE (2u)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_AD_MODE_ENABLE_OFF_CHOICE (3u)

#define PCAN_H19_E_AUTO_DRIVE_ADCU_AD_MODE_ENGAGE_INHIBIT_CHOICE (0u)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_AD_MODE_ENGAGE_ENGAGE_CHOICE (1u)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_AD_MODE_ENGAGE_RESERVE_2_CHOICE (2u)
#define PCAN_H19_E_AUTO_DRIVE_ADCU_AD_MODE_ENGAGE_RESERVE_3_CHOICE (3u)

#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_AD_MODE_ENABLE_SS_INHIBIT_CHOICE (0u)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_AD_MODE_ENABLE_SS_ENABLE_CHOICE (1u)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_AD_MODE_ENABLE_SS_FAIL_CHOICE (2u)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_AD_MODE_ENABLE_SS_OFF_CHOICE (3u)

#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_AD_MODE_ENGAGE_SS_INHIBIT_CHOICE (0u)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_AD_MODE_ENGAGE_SS_ENGAGE_CHOICE (1u)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_AD_MODE_ENGAGE_SS_RESERVE_2_CHOICE (2u)
#define PCAN_H19_E_AUTO_DRIVE_R_ADCU_AD_MODE_ENGAGE_SS_RESERVE_3_CHOICE (3u)

#define PCAN_H19_E_COMMAND_ADCU_TRANSMISSION_REQUESTED_GEAR_NEUTRAL__POSITION_CHOICE (222u)
#define PCAN_H19_E_COMMAND_ADCU_TRANSMISSION_REQUESTED_GEAR_REVERSE__SELECTOR__POSITION_CHOICE (223u)
#define PCAN_H19_E_COMMAND_ADCU_TRANSMISSION_REQUESTED_GEAR_NO__COMMAND_CHOICE (224u)
#define PCAN_H19_E_COMMAND_ADCU_TRANSMISSION_REQUESTED_GEAR_FORWARD__DRIVE__POSITION_CHOICE (252u)
#define PCAN_H19_E_COMMAND_ADCU_TRANSMISSION_REQUESTED_GEAR_ERROR_CHOICE (254u)

#define PCAN_H19_E_COMMAND_ADCU_EP_MODE_DEMAND_E_CHOICE (0u)
#define PCAN_H19_E_COMMAND_ADCU_EP_MODE_DEMAND_P_CHOICE (1u)
#define PCAN_H19_E_COMMAND_ADCU_EP_MODE_DEMAND_RESERVED_CHOICE (2u)
#define PCAN_H19_E_COMMAND_ADCU_EP_MODE_DEMAND_TAKE_NO_ACTION_CHOICE (3u)

#define PCAN_H19_E_COMMAND_ADCU_CREEP_MODE_DM_CHOICE (0u)
#define PCAN_H19_E_COMMAND_ADCU_CREEP_MODE_RM_CHOICE (1u)
#define PCAN_H19_E_COMMAND_ADCU_CREEP_MODE______CHOICE (2u)
#define PCAN_H19_E_COMMAND_ADCU_CREEP_MODE_TA_KE_NO_ACTION_CHOICE (3u)

#define PCAN_H19_E_COMMAND_ADCU_AUXILIARY_BRAKING_MODE_OFF_CHOICE (0u)
#define PCAN_H19_E_COMMAND_ADCU_AUXILIARY_BRAKING_MODE_CONSTANT_SPEED_CHOICE (1u)
#define PCAN_H19_E_COMMAND_ADCU_AUXILIARY_BRAKING_MODE_L1_CHOICE (2u)
#define PCAN_H19_E_COMMAND_ADCU_AUXILIARY_BRAKING_MODE_L2_CHOICE (3u)
#define PCAN_H19_E_COMMAND_ADCU_AUXILIARY_BRAKING_MODE_L3_CHOICE (4u)

#define PCAN_H19_E_AD_MODE_VECU_AD_MODE_OF_VECU_NOT_READY_CHOICE (0u)
#define PCAN_H19_E_AD_MODE_VECU_AD_MODE_OF_VECU_READY_CHOICE (1u)
#define PCAN_H19_E_AD_MODE_VECU_AD_MODE_OF_VECU_ENGAGED_CHOICE (2u)
#define PCAN_H19_E_AD_MODE_VECU_AD_MODE_OF_VECU_FAULT_CHOICE (3u)

#define PCAN_H19_E_AD_MODE_VECU_AUXILIARY_BRAKING_HAND_LEVER_STATION_OFF_CHOICE (0u)
#define PCAN_H19_E_AD_MODE_VECU_AUXILIARY_BRAKING_HAND_LEVER_STATION_______CHOICE (1u)
#define PCAN_H19_E_AD_MODE_VECU_AUXILIARY_BRAKING_HAND_LEVER_STATION_1_______20____________CHOICE (3u)
#define PCAN_H19_E_AD_MODE_VECU_AUXILIARY_BRAKING_HAND_LEVER_STATION_2_______60____________CHOICE (15u)
#define PCAN_H19_E_AD_MODE_VECU_AUXILIARY_BRAKING_HAND_LEVER_STATION_3_______100______________________CHOICE (63u)

#define PCAN_H19_E_DM1_VECU_PROTECT_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_VECU_PROTECT_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_VECU_AMBER_WARN_LAMP_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_VECU_AMBER_WARN_LAMP_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_VECU_RED_STOP_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_VECU_RED_STOP_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_VECU_MALFUNCTION_IND_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_VECU_MALFUNCTION_IND_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_EECU_PROTECT_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_EECU_PROTECT_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_EECU_AMBER_WARN_LAMP_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_EECU_AMBER_WARN_LAMP_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_EECU_RED_STOP_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_EECU_RED_STOP_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_EECU_MALFUNCTION_IND_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_EECU_MALFUNCTION_IND_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_LOW_IDLE_GOVERNOR_NO_REQUEST__DEFAULT_MODE__CHOICE (0u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_ACCELERATOR_PEDAL_OPERATOR_SELECTION_CHOICE (1u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_CRUISE_CONTROL_CHOICE (2u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_PTO_GOVERNOR_CHOICE (3u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_ROAD_SPEED_GOVERNOR_CHOICE (4u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_ASR_CONTROL_CHOICE (5u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_TRANSMISSION_CONTROL_CHOICE (6u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_ABS_CONTROL_CHOICE (7u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_TORQUE_LIMITING_CHOICE (8u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_HIGH_SPEED_GOVERNOR_CHOICE (9u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_BRAKING_SYSTEM_CHOICE (10u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_REMOTE_ACCELERATOR_CHOICE (11u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_SERVICE_PROCEDURE_CHOICE (12u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_NOT_DEFINED_CHOICE (13u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_OTHER_CHOICE (14u)
#define PCAN_H19_E_EEC1_ENGINETORQUEMODE_NOT_AVAILABLE_CHOICE (15u)

#define PCAN_H19_E_EEC1_ACTUAL_ENG_PERCENT_TORQ__0_000__CHOICE (0u)
#define PCAN_H19_E_EEC1_ACTUAL_ENG_PERCENT_TORQ__0_125__CHOICE (1u)
#define PCAN_H19_E_EEC1_ACTUAL_ENG_PERCENT_TORQ__0_875__CHOICE (7u)

#define PCAN_H19_E_EEC2_VECU_AP_KICKDOWN_SWT_OFF_CHOICE (0u)
#define PCAN_H19_E_EEC2_VECU_AP_KICKDOWN_SWT_ON_CHOICE (1u)
#define PCAN_H19_E_EEC2_VECU_AP_KICKDOWN_SWT_ERROR_CHOICE (2u)
#define PCAN_H19_E_EEC2_VECU_AP_KICKDOWN_SWT_NOT_AVAILABLE_CHOICE (3u)

#define PCAN_H19_E_CCVS_VECU_TWO_SPD_AXLE_SWT_LOW_SPEED_RANGE_CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_TWO_SPD_AXLE_SWT_HIGH_SPEED_RANGE_CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ACTIVE_CC_SWITCHED_OFF_CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ACTIVE_CC_SWITCH_ON_CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ENABLE_SWT_DISABLED_CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ENABLE_SWT_ENABLED_CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_SERVICE_BRAKE_SWT_DISABLED_CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_SERVICE_BRAKE_SWT_ENABLED_CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_CLTCH_SWT_RELEASED_CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_CLTCH_SWT_DEPRESSED_CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_SET_SWT_NOT_IN_POSITION__ON__CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_SET_SWT_IN_POSITION__ON__CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_COAST_SWT_NOT_IN_POSITION__DECELERATE__CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_COAST_SWT_IN_POSITION__DECELERATE__CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_RESUME_SWT_NOT_IN_POSITION__RESUME__CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_RESUME_SWT_IN_POSITION__RESUME__CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ACC_SWT_NOT_IN_POSITION__ACCELERATE__CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ACC_SWT_IN_POSITION__ACCELERATE__CHOICE (1u)

#define PCAN_H19_E_CCVS_VECU_PTO_ST_OFF__DISABLED_CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_HOLD_CHOICE (1u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_REMOTE_HOLD_CHOICE (2u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_STANDBY_CHOICE (3u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_REMOTE_STANDBY_CHOICE (4u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_SET_CHOICE (5u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_DECELERATE__COAST_CHOICE (6u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_RESUME_CHOICE (7u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_ACCELERATOR_CHOICE (8u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_ACCELERATOR_OVERRIDE_CHOICE (9u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_PREPROGRAMMED_SET_SPEED_1__8_CHOICE (10u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_11_CHOICE (11u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_12_CHOICE (12u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_13_CHOICE (13u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_14_CHOICE (14u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_15_CHOICE (15u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_16_CHOICE (16u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_17_CHOICE (17u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_18_CHOICE (18u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_19_CHOICE (19u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_20_CHOICE (20u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_21_CHOICE (21u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_22_CHOICE (22u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_23_CHOICE (23u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_24_CHOICE (24u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_25_CHOICE (25u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_26_CHOICE (26u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_27_CHOICE (27u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_28_CHOICE (28u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_29_CHOICE (29u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_UNDEFINED_30_CHOICE (30u)
#define PCAN_H19_E_CCVS_VECU_PTO_ST_NOT_AVAIL__CHOICE (31u)

#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ST_OFF__DISABLED_CHOICE (0u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ST_HOLD_CHOICE (1u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ST_ACCELERATE_CHOICE (2u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ST_DECELERATE__COAST_CHOICE (3u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ST_RESUME_CHOICE (4u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ST_SET_CHOICE (5u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ST_ACCELERATOR_OVERRIDE_CHOICE (6u)
#define PCAN_H19_E_CCVS_VECU_CRUISE_CTRL_ST_NOT_AVAILABLE_CHOICE (7u)

#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_DRV_ENGAGED_DRIVELINE_DISENGAGED_CHOICE (0u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_DRV_ENGAGED_DRIVELINE_ENGAGED_CHOICE (1u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_DRV_ENGAGED_ERROR_CHOICE (2u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_DRV_ENGAGED_NOT_AVAILABLE_CHOICE (3u)

#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_TRQ_CONV_LOCKUP_ENGAGED_TORQUE_CONVERTER_LOCKUP_DISENGAGED_CHOICE (0u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_TRQ_CONV_LOCKUP_ENGAGED_TORQUE_CONVERTER_LOCKUP_ENGAGED_CHOICE (1u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_TRQ_CONV_LOCKUP_ENGAGED_ERROR_CHOICE (2u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_TRQ_CONV_LOCKUP_ENGAGED_NOT_AVAILABLE_CHOICE (3u)

#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_SHIFT_PROC_SHIFT_IS_NOT_IN_PROCESS_CHOICE (0u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_SHIFT_PROC_SHIFT_IN_PROCESS_CHOICE (1u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_SHIFT_PROC_ERROR_CHOICE (2u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_SHIFT_PROC_NOT_AVAILABLE_CHOICE (3u)

#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_TRQ_CONV_LOCKUP_TRS_IN_PRO_TRANSITION_IS_NOT_IN_PROCESS_CHOICE (0u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_TRQ_CONV_LOCKUP_TRS_IN_PRO_TRANSITION_IS_IN_PROCESS_CHOICE (1u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_TRQ_CONV_LOCKUP_TRS_IN_PRO_ERROR_CHOICE (2u)
#define PCAN_H19_E_ETC1_TCU_ETC1_TRM_TRQ_CONV_LOCKUP_TRS_IN_PRO_NOT_AVAILABLE_CHOICE (3u)

#define PCAN_H19_E_ETC1_TCU_ETC1_ENG_MOM_OVER_SPD_EN_MOMENTARY_ENGINE_OVERSPEED_IS_DISABLED_CHOICE (0u)
#define PCAN_H19_E_ETC1_TCU_ETC1_ENG_MOM_OVER_SPD_EN_MOMENTARY_ENGINE_OVERSPEED_IS_ENABLED_CHOICE (1u)
#define PCAN_H19_E_ETC1_TCU_ETC1_ENG_MOM_OVER_SPD_EN_RESERVED_CHOICE (2u)
#define PCAN_H19_E_ETC1_TCU_ETC1_ENG_MOM_OVER_SPD_EN_TAKE_NO_ACTION_CHOICE (3u)

#define PCAN_H19_E_ETC1_TCU_ETC1_PROGRES_SHIFT_DIS_PROGRESSIVE_SHIFT_IS_NOT_DISABLED_CHOICE (0u)
#define PCAN_H19_E_ETC1_TCU_ETC1_PROGRES_SHIFT_DIS_PROGRESSIVE_SHIFT_IS_DISABLED_CHOICE (1u)
#define PCAN_H19_E_ETC1_TCU_ETC1_PROGRES_SHIFT_DIS_RESERVED_CHOICE (2u)
#define PCAN_H19_E_ETC1_TCU_ETC1_PROGRES_SHIFT_DIS_TAKE_NO_ACTION_CHOICE (3u)

#define PCAN_H19_E_ETC1_TCU_ETC1_MOM_ENG_MAX_POW_EN_NOT_REQUESTING_MAXIMUM_POWER_AVAILABLE_CHOICE (0u)
#define PCAN_H19_E_ETC1_TCU_ETC1_MOM_ENG_MAX_POW_EN_MOMENTARILY_REQUESTING_MAXIMUM_POWER_AVAILABLE_CHOICE (1u)
#define PCAN_H19_E_ETC1_TCU_ETC1_MOM_ENG_MAX_POW_EN_FAULT_CHOICE (2u)
#define PCAN_H19_E_ETC1_TCU_ETC1_MOM_ENG_MAX_POW_EN_NOT_AVAILABLE_CHOICE (3u)

#define PCAN_H19_E_TSC1_TE_TCU_ENG_OVERRIDE_CTRL_MODE_OVERRIDE_DISABLED_CHOICE (0u)
#define PCAN_H19_E_TSC1_TE_TCU_ENG_OVERRIDE_CTRL_MODE_SPEED_CONTROL_CHOICE (1u)
#define PCAN_H19_E_TSC1_TE_TCU_ENG_OVERRIDE_CTRL_MODE_TORQUE_CONTROL_CHOICE (2u)
#define PCAN_H19_E_TSC1_TE_TCU_ENG_OVERRIDE_CTRL_MODE_SPEED_TORQUE_LIMIT_CONTROL_CHOICE (3u)

#define PCAN_H19_E_TSC1_TE_TCU_ENG_REQUESTED_SPEED_CTRL_CONDITIONS_TRANSIENT__OPTIMIZED_FOR_DRIVELINE_DISENGAGED_AND_NON_LOCKUP_CONDITIONS_CHOICE (0u)
#define PCAN_H19_E_TSC1_TE_TCU_ENG_REQUESTED_SPEED_CTRL_CONDITIONS_STABILITY__OPTIMIZED_FOR_DRIVELINE_DISENGAGED_AND_NON_LOCKUP_CONDITIONS_CHOICE (1u)
#define PCAN_H19_E_TSC1_TE_TCU_ENG_REQUESTED_SPEED_CTRL_CONDITIONS_STABILITY__OPTIMIZED_FOR_DRIVELINE_ENGAGED_AND_OR_IN_LOCKUP_CONDITION_1_CHOICE (2u)
#define PCAN_H19_E_TSC1_TE_TCU_ENG_REQUESTED_SPEED_CTRL_CONDITIONS_STABILITY__OPTIMIZED_FOR_DRIVELINE_ENGAGED_AND_OR_IN_LOCKUP_CONDITION_2_CHOICE (3u)

#define PCAN_H19_E_TSC1_TE_TCU_OVERRIDE_CTRL_MODE_PRIORITY_HIGHEST_PRIORITY_CHOICE (0u)
#define PCAN_H19_E_TSC1_TE_TCU_OVERRIDE_CTRL_MODE_PRIORITY_HIGH_PRIORITY_CHOICE (1u)
#define PCAN_H19_E_TSC1_TE_TCU_OVERRIDE_CTRL_MODE_PRIORITY_MEDIUM_PRIORITY_CHOICE (2u)
#define PCAN_H19_E_TSC1_TE_TCU_OVERRIDE_CTRL_MODE_PRIORITY_LOW_PRIORITY_CHOICE (3u)

#define PCAN_H19_E_TSC1_TE_TCU_TSC1_TRANS_RATE_1000_MS_TRANSMISSION_RATE_CHOICE (0u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_TRANS_RATE_750_MS_TRANSMISSION_RATE_CHOICE (1u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_TRANS_RATE_500_MS_TRANSMISSION_RATE_CHOICE (2u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_TRANS_RATE_250_MS_TRANSMISSION_RATE_CHOICE (3u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_TRANS_RATE_100_MS_TRANSMISSION_RATE_CHOICE (4u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_TRANS_RATE_50_MS_TRANSMISSION_RATE_CHOICE (5u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_TRANS_RATE_20_MS_TRANSMISSION_RATE_CHOICE (6u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_TRANS_RATE_USE_STANDARD_TSC1_TRANSMISSION_RATES_OF_10_MS_TO_ENGINE_CHOICE (7u)

#define PCAN_H19_E_TSC1_TE_TCU_TSC1_CTRL_PURPOSE_P1____ACCELERATOR__PEDAL__OPERATOR__SELECTION_CHOICE (0u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_CTRL_PURPOSE_P2____CRUISE__CONTROL_CHOICE (1u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_CTRL_PURPOSE_P3___PTO__GOVERNOR_CHOICE (2u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_CTRL_PURPOSE_P4____ROAD__SPEED__GOVERNOR_CHOICE (3u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_CTRL_PURPOSE_P5____ENGINE__PROTECTION_CHOICE (4u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_CTRL_PURPOSE_P6____TRANSIENT__OPTIMIZED__TORQUE__LIMIT_CHOICE (5u)
#define PCAN_H19_E_TSC1_TE_TCU_TSC1_CTRL_PURPOSE_P32____TEMPORARY__POWER__TRAIN__CONTROL_CHOICE (31u)

#define PCAN_H19_E_TSC1_TE_TCU_ENG_REQUESTED_TORQUE_HIGH_RESOLUTION__0_000__CHOICE (0u)
#define PCAN_H19_E_TSC1_TE_TCU_ENG_REQUESTED_TORQUE_HIGH_RESOLUTION__0_125__CHOICE (1u)
#define PCAN_H19_E_TSC1_TE_TCU_ENG_REQUESTED_TORQUE_HIGH_RESOLUTION__0_875__CHOICE (7u)

#define PCAN_H19_E_DM1_TCU_PROTECT_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_TCU_PROTECT_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_TCU_AMBER_WARN_LAMP_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_TCU_AMBER_WARN_LAMP_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_TCU_RED_STOP_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_TCU_RED_STOP_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_DM1_TCU_MALFUNCTION_IND_LAMP_ST_LAMP__OFF_CHOICE (0u)
#define PCAN_H19_E_DM1_TCU_MALFUNCTION_IND_LAMP_ST_LAMP__ON_CHOICE (1u)

#define PCAN_H19_E_XBR_ADCU_EXTERNAL_ACC_DEMAND__10_TO_10_M_SS_CHOICE (0u)

#define PCAN_H19_E_XBR_ADCU_XBREBI_MODE_NO__ENDURANCE__BRAKE__INTEGRATION_ALLOWED_CHOICE (0u)
#define PCAN_H19_E_XBR_ADCU_XBREBI_MODE_ONLY__ENDURANCE__BRAKES_ALLOWED_CHOICE (1u)
#define PCAN_H19_E_XBR_ADCU_XBREBI_MODE_ENDURANCE__BRAKE__INTEGRATION_ALLOWED_CHOICE (2u)
#define PCAN_H19_E_XBR_ADCU_XBREBI_MODE_NOT_DEFINED_CHOICE (3u)

#define PCAN_H19_E_XBR_ADCU_XBR_PRIORITY_HIGHEST_PRIORITY_CHOICE (0u)
#define PCAN_H19_E_XBR_ADCU_XBR_PRIORITY_HIGH_PRIORITY_CHOICE (1u)
#define PCAN_H19_E_XBR_ADCU_XBR_PRIORITY_MEDIUM_PRIORITY_CHOICE (2u)
#define PCAN_H19_E_XBR_ADCU_XBR_PRIORITY_LOW_PRIORITY_CHOICE (3u)

#define PCAN_H19_E_XBR_ADCU_XBR_CTRL_MODE_OVERRIDE_DISABLED_CHOICE (0u)
#define PCAN_H19_E_XBR_ADCU_XBR_CTRL_MODE_ACCELERATION_CONTROL_WITH_ADDITION_MODE_CHOICE (1u)
#define PCAN_H19_E_XBR_ADCU_XBR_CTRL_MODE_ACCELERATION_CONTROL_WITH_MAXIMUM_MODE_CHOICE (2u)
#define PCAN_H19_E_XBR_ADCU_XBR_CTRL_MODE_NOT_DEFINED_CHOICE (3u)

#define PCAN_H19_E_STATE_SCU_SHIFT_HANDLE_CURRENT_GEAR_N_CHOICE (0u)
#define PCAN_H19_E_STATE_SCU_SHIFT_HANDLE_CURRENT_GEAR_D_CHOICE (1u)
#define PCAN_H19_E_STATE_SCU_SHIFT_HANDLE_CURRENT_GEAR_R_CHOICE (2u)
#define PCAN_H19_E_STATE_SCU_SHIFT_HANDLE_CURRENT_GEAR_RESERVED_CHOICE (3u)

#define PCAN_H19_E_STATE_SCU_AD_MODE_OF_SCU_NOT_READY_CHOICE (0u)
#define PCAN_H19_E_STATE_SCU_AD_MODE_OF_SCU_READY_CHOICE (1u)
#define PCAN_H19_E_STATE_SCU_AD_MODE_OF_SCU_ENGAGED_CHOICE (2u)
#define PCAN_H19_E_STATE_SCU_AD_MODE_OF_SCU_FAULT_CHOICE (3u)

#define PCAN_H19_E_STATE_SCU_SHIFT_HANDLEPOSITION_WARNING_NO_WARNING_CHOICE (0u)
#define PCAN_H19_E_STATE_SCU_SHIFT_HANDLEPOSITION_WARNING_WARNING_CHOICE (1u)

#define PCAN_H19_E_STATE_SCU_E_P_STATE_NO_PRESS_CHOICE (0u)
#define PCAN_H19_E_STATE_SCU_E_P_STATE_PRESSED_CHOICE (1u)
#define PCAN_H19_E_STATE_SCU_E_P_STATE_ERROR_CHOICE (2u)
#define PCAN_H19_E_STATE_SCU_E_P_STATE_RESERVED_CHOICE (3u)

#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_MANEUVER__REVERSE__REQUEST_CHOICE (28u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_NEUTRAL__POSITION_CHOICE (222u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_REVERSE__SELECTOR__POSITION_CHOICE (223u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_NO__COMMAND_CHOICE (224u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_MANEUVER__FORWARD__REQUEST_CHOICE (228u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_TOGGLE_AUTO_OR__MANUAL_CHOICE (231u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_DOWNSHIFT_2_GEARS_FROM_CURRENT_POSITION_CHOICE (246u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_DOWNSHIFT_1_GEAR_FROM_CURRENT_POSITION_CHOICE (247u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_UPSHIFT_2_GEARS_FROM_CURRENT_POSITION_CHOICE (248u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_UPSHIFT_1_GEAR_FROM_CURRENT_POSITION_CHOICE (249u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_FORWARD__DRIVE__POSITION_CHOICE (252u)
#define PCAN_H19_E_TC1_SCU_TRANSMISSION_MODE2_E_P_MODE_ERROR_CHOICE (254u)

#define PCAN_H19_E_TC1_SCU_AD_MODE_OF_SCU_DISABLE_CHOICE (0u)
#define PCAN_H19_E_TC1_SCU_AD_MODE_OF_SCU_ENABLE_CHOICE (1u)
#define PCAN_H19_E_TC1_SCU_AD_MODE_OF_SCU_RESERVED_CHOICE (2u)
#define PCAN_H19_E_TC1_SCU_AD_MODE_OF_SCU_TAKE_NO_ACTION_CHOICE (3u)

#define PCAN_H19_E_IBSW_IBS1_BATTERY1_SOC_WARNING_SOC__75____GREEN_INDICATOR_CHOICE (0u)
#define PCAN_H19_E_IBSW_IBS1_BATTERY1_SOC_WARNING_75___SOC__50____YELLOW_INDICATOR_CHOICE (1u)
#define PCAN_H19_E_IBSW_IBS1_BATTERY1_SOC_WARNING_SOC__50____RED_INDICATOR_CHOICE (2u)
#define PCAN_H19_E_IBSW_IBS1_BATTERY1_SOC_WARNING_NOT_AVAILABLE_CHOICE (3u)

#define PCAN_H19_E_IBSW_IBS1_BATTERY1_SOH_WARNING_SOH__50____NO__WARNING_CHOICE (0u)
#define PCAN_H19_E_IBSW_IBS1_BATTERY1_SOH_WARNING_SOH__50____WARNING_CHOICE (1u)

#define PCAN_H19_E_IBSW_IBS2_BATTERY2_SOC_WARNING_SOC__75____GREEN_INDICATOR_CHOICE (0u)
#define PCAN_H19_E_IBSW_IBS2_BATTERY2_SOC_WARNING_75___SOC__50____YELLOW_INDICATOR_CHOICE (1u)
#define PCAN_H19_E_IBSW_IBS2_BATTERY2_SOC_WARNING_SOC__50____RED_INDICATOR_CHOICE (2u)
#define PCAN_H19_E_IBSW_IBS2_BATTERY2_SOC_WARNING_NOT_AVAILABLE_CHOICE (3u)

#define PCAN_H19_E_IBSW_IBS2_BATTERY2_SOH_WARNING_SOH__50____NO__WARNING_CHOICE (0u)
#define PCAN_H19_E_IBSW_IBS2_BATTERY2_SOH_WARNING_SOH__50____WARNING_CHOICE (1u)

/**
 * Signals in message TSC1_ACC.
 *
 * TCU����EECU�ٶ�Ť�أ���������
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_tsc1_acc_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eng_override_ctrl_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eng_requested_speed_ctrl_conditions;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t override_ctrl_mode_priority;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_requested_speed_speed_limit;

    /**
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_requested_torque_torque_limit;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tsc1_trans_rate;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tsc1_ctrl_purpose;

    /**
     * Range: 0..7 (0..0.875 %)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t eng_requested_torque_high_resolution;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t message_counter;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t message_checksum;
};

/**
 * Signals in message AutoDrive_ADCU.
 *
 * �Զ���ʻģʽ
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_auto_drive_adcu_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc8;

    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_mode_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_mode_engage;
};

/**
 * Signals in message AutoDrive_rADCU.
 *
 * �Զ���ʻģʽ
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_auto_drive_r_adcu_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t crc8;

    /**
     * Range: 0..14 (0..14 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t counter;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_mode_enable_ss;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_mode_engage_ss;
};

/**
 * Signals in message Command_ADCU.
 *
 * ���ŵ�λ����
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_command_adcu_t {
    /**
     * Range: 0..250 (0..100 -)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t accelerater_pedal_position_demand;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t transmission_requested_gear;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ep_mode_demand;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t creep_mode;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t auxiliary_braking_mode;
};

/**
 * Signals in message ADMode_VECU.
 *
 * VECU�Զ���ʻ״̬����
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_ad_mode_vecu_t {
    /**
     * VECU�Զ���ʻ״̬����
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_mode_of_vecu;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t creepstate;

    /**
     * �����ƶ�����λ�÷���
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t auxiliary_braking_hand_lever_station;

    /**
     * ��������̤��λ��
     *
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t acc_pedal_pos;
};

/**
 * Signals in message DM1_VECU.
 *
 * VECU����״̬
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_dm1_vecu_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t protect_lamp_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amber_warn_lamp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t red_stop_lamp_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t malfunction_ind_lamp_st;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_least_byte_spn;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_second_byte_spn;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fmi;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_3_most_significant_bits;

    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t oc_curr_count;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_conversion_method;
};

/**
 * Signals in message DM1_EECU.
 *
 * VECU����״̬
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_dm1_eecu_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t protect_lamp_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amber_warn_lamp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t red_stop_lamp_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t malfunction_ind_lamp_st;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_least_byte_spn;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_second_byte_spn;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fmi;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_3_most_significant_bits;

    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t oc_curr_count;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_conversion_method;
};

/**
 * Signals in message EEC1.
 *
 * ��ǰŤ�ذٷֱ�
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_eec1_t {
    /**
     * Engine Torque Mode
     *
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t enginetorquemode;

    /**
     * This parameter displays an additional torque in percent of the reference engine torque.
     *
     * Range: 0..7 (0..0.875 %)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t actual_eng_percent_torq;

    /**
     * Engine Torque Percentage Based on Driver's Intention
     *
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t driver_jsdemand_eng_per_torq;

    /**
     * Actual Torque Percentage of Engine
     *
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t actualengine_percenttorque;

    /**
     * engine speed
     *
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t enginespeed;

    /**
     * Source address of engine control device
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t source_address_control_device_eng;

    /**
     * Percentage of engine required torque
     *
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t enginedemand_percenttorque;
};

/**
 * Signals in message EEC2_VECU.
 *
 * ����̤��λ��
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_eec2_vecu_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ap_kickdown_swt;

    /**
     * ����̤��λ��
     *
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t acc_pedal_pos;

    /**
     * Actual Maximum Available Engine - Percent Torque
     * ������
     * ʵ�ʷ�����������Ť�ذٷֱ�
     *
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t actu_max_available_eng_pcnt_torque;
};

/**
 * Signals in message EEC3.
 *
 * Ħ��Ť�ذٷֱ�
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_eec3_t {
    /**
     * Friction Torque Percentage
     *
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t nominal_friction_percent_torque;

    /**
     * Assessment of actual engine loss-torque percentage
     *
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t estimtd_eng_parasitic_losses_per_trq;
};

/**
 * Signals in message EC1_EECU.
 *
 * �������ο�Ť��
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_ec1_eecu_t {
    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_speed_at_idle_point1;

    /**
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_percent_torque_at_idle_point1;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_speed_at_point2;

    /**
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_percent_torque_at_point2;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_speed_at_point3;

    /**
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_percent_torque_at_point3;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_speed_at_point4;

    /**
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_percent_torque_at_point4;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_speed_at_point5;

    /**
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_percent_torque_at_point5;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_speed_at_high_idle_point6;

    /**
     * Range: 0..64254.99999974342799302891295 (0..50.2 %/rpm)
     * Scale: 0.00078126215859
     * Offset: 0
     */
    uint16_t eng_gain;

    /**
     * Range: 0..64255 (0..64255 Nm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eng_reference_torque;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_mx_mmentary_override_speed_point7;

    /**
     * Range: 0..250 (0..25 s)
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t eng_max_momentary_override_time_limit;

    /**
     * Range: 0..250 (0..2500 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint8_t eng_rqstd_speed_ctrl_range_lower_limit;

    /**
     * Range: 0..250 (0..2500 rpm)
     * Scale: 10
     * Offset: 0
     */
    uint8_t eng_rqstd_speed_ctrl_range_upper_limit;

    /**
     * Range: 0..255 (-125..130 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_rqstd_trque_ctrl_range_lower_limit;

    /**
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_rqstd_trque_ctrl_range_upper_limit;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_ex_rng_rqstd_spd_ctrl_rng_uppr_limit;

    /**
     * Range: 0..257.02 (0..257.02 kg-m^2)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eng_moment_of_inertia;

    /**
     * Range: 0..64255 (0..64255 Nm)
     * Scale: 1
     * Offset: 0
     */
    uint16_t eng_default_torque_limit;
};

/**
 * Signals in message TPCM_E_EECU.
 *
 * ������EC1���Ĵ������
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_tpcm_e_eecu_t {
    /**
     * �������״̬
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t control_byte;

    /**
     * �������ֽ���
     *
     * Range: 0..65535 (0..65535 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t total_number_of_bbytes;

    /**
     * �����ܰ���
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t total_number_of_packets;

    /**
     * ��Ҫ���䱨�ĵ�PGN
     *
     * Range: 0..16777215 (0..16777215 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t parameter_group_number;
};

/**
 * Signals in message TPDT_E_EECU.
 *
 * ������EC1���Ĵ������
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_tpdt_e_eecu_t {
    /**
     * ���к�
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t sequence_number;

    /**
     * Range: 0..72057594037927900 (0..7.20575940379279E+16 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t packetised_data;
};

/**
 * Signals in message CCVS_VECU.
 *
 * ��ǰ���١�Ѳ�������趨ֵ
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_ccvs_vecu_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t two_spd_axle_swt;

    /**
     * Range: 0..64254.976 (0..250.996 km/h)
     * Scale: 0.00390625
     * Offset: 0
     */
    uint16_t wheel_based_veh_spd;

    /**
     * status of CC ring on internal CAN and status of CC regulation on FMS public network
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_ctrl_active;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_ctrl_enable_swt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t service_brake_swt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cltch_swt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_ctrl_set_swt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_ctrl_coast_swt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_ctrl_resume_swt;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_ctrl_acc_swt;

    /**
     * Range: 0..250 (0..250 km/h)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_ctrl_set_spd;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t pto_st;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t cruise_ctrl_st;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccvs_msg_counter;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ccvs_check_sum;
};

/**
 * Signals in message RQST_ADECU.
 *
 * AD������VIN��
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_rqst_adecu_t {
    /**
     * Request VIN
     *
     * Range: 0..16777215 (0..16777215 -)
     * Scale: 1
     * Offset: 0
     */
    uint32_t requested_pgn_lsb_2nd_msb;
};

/**
 * Signals in message VIN_EECU.
 *
 * �������
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_vin_eecu_t {
    /**
     * Byte: 1-n Vehicle Identification Number
     * 
     * Delimiter (ASCII ��*��)
     *
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t vehicle_identification;
};

/**
 * Signals in message ETC1_TCU.
 *
 * ��λ���״̬
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_etc1_tcu_t {
    /**
     * Driveline engaged indicates the transmission controlled portion of the driveline is engaged sufficiently to allow a transfer of torque through the transmission.  Driveline engaged is ACTIVE whenever the transmission is in gear and the clutch (if controlled by the transmission controller) is less than 100% clutch slip (clutch able to transfer torque).  This parameter should be used in conjunction with the parameter 'Shift in Process' (SPN 574).  While a shift is in process, the receiver should not assume that the driveline is either fully engaged or disengaged (i.e., cruise control).
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc1_trm_drv_engaged;

    /**
     * State signal which indicates whether the torque converter lockup is engaged.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc1_trm_trq_conv_lockup_engaged;

    /**
     * Indicates that the transmission is in process of shifting from the current gear to the selected gear. This state is generally ACTIVE during the entire time that the transmission controls the vehicle during a shift. This includes any transmission clutch control, all engine control sequences, pulling to transmission neutral, and engaging the destination gear (e.g., until it is no longer sending commands and/or limits to the engine). See also SPN 560. (See Figure SPN574_A)
     * 
     * This state is INACTIVE during other engine control such as torque limiting outside of a shift.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc1_trm_shift_proc;

    /**
     * State signal indicating whether or not the transmission torque converter lock up clutch is transitioning between being applied and being released.  The broadcast value should be set to 01b as soon as an apply or release of the lockup clutch is initiated, and then set to 00b once the given transition is complete.  This parameter is a companion to SPN 573 Transmission Torque Converter Lockup Engaged.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc1_trm_trq_conv_lockup_trs_in_pro;

    /**
     * Calculated speed of the transmission 1 output shaft.
     *
     * Range: 0..65535 (0..8191.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t etc1_trm_out_spd;

    /**
     * Parameter which represents the ratio of input shaft speed to current engine speed (in percent).
     * 
     * Percent Clutch Slip = ((Engine rpm - Input shaft rpm)/(Engine rpm)) x 100
     *
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t etc1_per_clut_slip;

    /**
     * Command signal used to indicate that the engine speed may be boosted up to the maximum engine overspeed value to accommodate transmission downshifts.  The maximum time for overspeed is limited by the time defined in the engine configuration message (see PGN 65,251).  The transmission module must command a 'override disabled' state at least once before the engine will accept a subsequent request for overspeed.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc1_eng_mom_over_spd_en;

    /**
     * Command signal used to indicate that progressive shifting by the engine should be disallowed.
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc1_progres_shift_dis;

    /**
     * Momentarily Requesting highest torque map from the engine control
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc1_mom_eng_max_pow_en;

    /**
     * Rotational velocity of the primary shaft transferring power into the first transmission.  When a torque converter is present, it is the output of the torque converter.
     * 
     * Note:
     * 
     * Single input shaft transmissions should use SPN 161 (Transmission Input Shaft Speed).
     * Multiple input shaft transmissions should use SPN 5960 and 5961 (DCT Input Shaft 1 and 2 Speeds).
     * 
     * For maximum compatibility, a multiple input shaft speed transmission may also broadcast SPN 161 as a
     * virtual or current inputshaft speed with the following logic:
     * 
     * Transmission Input Shaft Speed = DCT Input Shaft 1 Speed when shaft 1 is engaged.
     * Transmission Input Shaft Speed = DCT Input Shaft 2 Speed when shaft 2 is engaged.
     * Transmission Input Shaft Speed = Transitional interpolated value when shifting between shaft 1 and 2.
     *
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t etc1_trm_input_shaft;

    /**
     * The source address of the SAE J1939 device currently controlling the transmission. Its value may be the source address of the ECU transmitting the message (which means that no external SAE J1939 message is providing the active command) or the source address of the SAE J1939 ECU that is currently providing the active command in a TSC1 (see PGN 0) or similar message.  Note that if this parameter value is the same as the source address of the device transmitting it, the control may be due to a message on a non-SAE J1939 data link such as SAE J1922 or a proprietary link.
     *
     * Range: 0..255 (0..255 SA)
     * Scale: 1
     * Offset: 0
     */
    uint8_t etc1_src_adr_ctr_dev_tc;
};

/**
 * Signals in message ETC2_TCU.
 *
 * ��ǰ��λ
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_etc2_tcu_t {
    /**
     * Range: 0..250 (-125..125 -)
     * Scale: 1
     * Offset: -125
     */
    uint8_t trans_selected_gear;

    /**
     * Range: 0..64255 (0..64.255 -)
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t trans_actual_gear_ratio;

    /**
     * Range: 0..250 (-125..125 -)
     * Scale: 1
     * Offset: -125
     */
    uint8_t trans_current_gear;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t trans_requested_range;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint16_t trans_current_range;
};

/**
 * Signals in message ETC7_TCU.
 *
 * ��λ�ͷ�״̬
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_etc7_tcu_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trns_crrent_range_display_blank_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_service_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trns_rqsted_range_display_blank_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trns_rqsted_range_display_flash_state;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_ready_for_brake_release;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t active_shift_console_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_eng_crank_enable;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_shift_inhibit_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode4_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode3_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode2_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode1_indicator;

    /**
     * Range: 0..250 (-125..125 -)
     * Scale: 1
     * Offset: -125
     */
    uint8_t trans_requested_gear_feedback;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode5_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode6_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode7_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode8_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trns_rverse_gear_shift_inhibit_status;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_warning_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode9_indicator;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_mode10_indicator;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_air_supply_press_indicator;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t trans_auto_neutral_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t manual_mode_ind;
};

/**
 * Signals in message TSC1_TE_TCU.
 *
 * TCU����EECU�ٶ�Ť�أ���������
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_tsc1_te_tcu_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eng_override_ctrl_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t eng_requested_speed_ctrl_conditions;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t override_ctrl_mode_priority;

    /**
     * Range: 0..64255 (0..8031.875 rpm)
     * Scale: 0.125
     * Offset: 0
     */
    uint16_t eng_requested_speed_speed_limit;

    /**
     * Range: 0..250 (-125..125 %)
     * Scale: 1
     * Offset: -125
     */
    uint8_t eng_requested_torque_torque_limit;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tsc1_trans_rate;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t tsc1_ctrl_purpose;

    /**
     * Range: 0..7 (0..0.875 %)
     * Scale: 0.125
     * Offset: 0
     */
    uint8_t eng_requested_torque_high_resolution;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t message_counter;

    /**
     * Range: 0..15 (0..15 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t message_checksum;
};

/**
 * Signals in message DM1_TCU.
 *
 * VECU����״̬
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_dm1_tcu_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t protect_lamp_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t amber_warn_lamp;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t red_stop_lamp_st;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t malfunction_ind_lamp_st;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_least_byte_spn;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_second_byte_spn;

    /**
     * Range: 0..31 (0..31 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t fmi;

    /**
     * Range: 0..7 (0..7 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_3_most_significant_bits;

    /**
     * Range: 0..127 (0..127 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t oc_curr_count;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t spn_conversion_method;
};

/**
 * Signals in message XBR_ADCU.
 *
 * �ⲿ�ƶ�����
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_xbr_adcu_t {
    /**
     * Range: 0..64251.48474298586934261724350 (-15.687..15.687 m/s2)
     * Scale: 0.0004883
     * Offset: -15.687
     */
    uint16_t external_acc_demand;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t xbrebi_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t xbr_priority;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t xbr_ctrl_mode;

    /**
     * Range: 0..250 (0..100 %)
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t xb_rurgency;

    /**
     * Range: 0..15 (0..15 count)
     * Scale: 1
     * Offset: 0
     */
    uint8_t msgcounter;

    /**
     * Range: 0..15 (0..15 count)
     * Scale: 1
     * Offset: 0
     */
    uint8_t msgchecksum;
};

/**
 * Signals in message State_SCU.
 *
 * �ֱ�״̬
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_state_scu_t {
    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_handle_current_gear;

    /**
     * SCU�Զ���ʻ״̬����
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_mode_of_scu;

    /**
     * TCU�ⷢʵ�ʵ�λ�뿪����ť��λ��һ������
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t shift_handleposition_warning;

    /**
     * E/P�Ը�λ����״̬����
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t e_p_state;
};

/**
 * Signals in message TC1_SCU.
 *
 * �ֱ���λ����
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_tc1_scu_t {
    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t transmission_mode2_e_p_mode;

    /**
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t ad_mode_of_scu;
};

/**
 * Signals in message VEP8_IBS1.
 *
 * ���ܵ�ش�����
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_vep8_ibs1_t {
    /**
     * SLI Battery Pack 1 Battery 1 State of Charge
     *
     * Range: 0..64255 (0..160.6375 %)
     * Scale: 0.0025
     * Offset: 0
     */
    uint16_t battery1_stateof_charge;

    /**
     * SLI Battery Pack 1 Battery 1 Health
     *
     * Range: 0..250 (0..125 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t battery1_health;
};

/**
 * Signals in message IBSW_IBS1.
 *
 * ���ܵ�ش�����
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_ibsw_ibs1_t {
    /**
     * ������ʾ�û������ʣ������������Ǳ��Ͻ�����Ӧ�����Ѻͱ���
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery1_soc_warning;

    /**
     * ������ʾ�û�����ؽ���״̬�������Ǳ��Ͻ�����Ӧ�����Ѻͱ���
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery1_soh_warning;
};

/**
 * Signals in message VEP8_IBS2.
 *
 * ���ܵ�ش�����
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_vep8_ibs2_t {
    /**
     * SLI Battery Pack 1 Battery 1 State of Charge
     * ��Ӧ�������ص�IBS
     *
     * Range: 0..64255 (0..160.6375 %)
     * Scale: 0.0025
     * Offset: 0
     */
    uint16_t battery2_stateof_charge;

    /**
     * SLI Battery Pack 1 Battery 1 Health
     *
     * Range: 0..250 (0..125 %)
     * Scale: 0.5
     * Offset: 0
     */
    uint8_t battery2_health;
};

/**
 * Signals in message IBSW_IBS2.
 *
 * ���ܵ�ش�����
 *
 * All signal values are as on the CAN bus.
 */
struct pcan_h19_e_ibsw_ibs2_t {
    /**
     * ������ʾ�û������ʣ������������Ǳ��Ͻ�����Ӧ�����Ѻͱ���
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery2_soc_warning;

    /**
     * ������ʾ�û�����ؽ���״̬�������Ǳ��Ͻ�����Ӧ�����Ѻͱ���
     *
     * Range: 0..3 (0..3 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t battery2_soh_warning;
};

/**
 * Pack message TSC1_ACC.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_tsc1_acc_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_tsc1_acc_t *src_p,
    size_t size);

/**
 * Unpack message TSC1_ACC.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_tsc1_acc_unpack(
    struct pcan_h19_e_tsc1_acc_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_eng_override_ctrl_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_eng_override_ctrl_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_eng_override_ctrl_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_eng_requested_speed_ctrl_conditions_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_eng_requested_speed_ctrl_conditions_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_eng_requested_speed_ctrl_conditions_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_override_ctrl_mode_priority_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_override_ctrl_mode_priority_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_override_ctrl_mode_priority_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_tsc1_acc_eng_requested_speed_speed_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_eng_requested_speed_speed_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_eng_requested_speed_speed_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_eng_requested_torque_torque_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_eng_requested_torque_torque_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_eng_requested_torque_torque_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_tsc1_trans_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_tsc1_trans_rate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_tsc1_trans_rate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_tsc1_ctrl_purpose_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_tsc1_ctrl_purpose_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_tsc1_ctrl_purpose_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_eng_requested_torque_high_resolution_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_eng_requested_torque_high_resolution_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_eng_requested_torque_high_resolution_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_message_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_message_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_message_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_acc_message_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_acc_message_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_acc_message_checksum_is_in_range(uint8_t value);

/**
 * Pack message AutoDrive_ADCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_auto_drive_adcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_auto_drive_adcu_t *src_p,
    size_t size);

/**
 * Unpack message AutoDrive_ADCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_auto_drive_adcu_unpack(
    struct pcan_h19_e_auto_drive_adcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_auto_drive_adcu_crc8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_auto_drive_adcu_crc8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_auto_drive_adcu_crc8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_auto_drive_adcu_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_auto_drive_adcu_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_auto_drive_adcu_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_auto_drive_adcu_ad_mode_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_auto_drive_adcu_ad_mode_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_auto_drive_adcu_ad_mode_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_auto_drive_adcu_ad_mode_engage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_auto_drive_adcu_ad_mode_engage_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_auto_drive_adcu_ad_mode_engage_is_in_range(uint8_t value);

/**
 * Pack message AutoDrive_rADCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_auto_drive_r_adcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_auto_drive_r_adcu_t *src_p,
    size_t size);

/**
 * Unpack message AutoDrive_rADCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_auto_drive_r_adcu_unpack(
    struct pcan_h19_e_auto_drive_r_adcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_auto_drive_r_adcu_crc8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_auto_drive_r_adcu_crc8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_auto_drive_r_adcu_crc8_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_auto_drive_r_adcu_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_auto_drive_r_adcu_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_auto_drive_r_adcu_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_auto_drive_r_adcu_ad_mode_enable_ss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_auto_drive_r_adcu_ad_mode_enable_ss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_auto_drive_r_adcu_ad_mode_enable_ss_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_auto_drive_r_adcu_ad_mode_engage_ss_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_auto_drive_r_adcu_ad_mode_engage_ss_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_auto_drive_r_adcu_ad_mode_engage_ss_is_in_range(uint8_t value);

/**
 * Pack message Command_ADCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_command_adcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_command_adcu_t *src_p,
    size_t size);

/**
 * Unpack message Command_ADCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_command_adcu_unpack(
    struct pcan_h19_e_command_adcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_command_adcu_accelerater_pedal_position_demand_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_command_adcu_accelerater_pedal_position_demand_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_command_adcu_accelerater_pedal_position_demand_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_command_adcu_transmission_requested_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_command_adcu_transmission_requested_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_command_adcu_transmission_requested_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_command_adcu_ep_mode_demand_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_command_adcu_ep_mode_demand_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_command_adcu_ep_mode_demand_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_command_adcu_creep_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_command_adcu_creep_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_command_adcu_creep_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_command_adcu_auxiliary_braking_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_command_adcu_auxiliary_braking_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_command_adcu_auxiliary_braking_mode_is_in_range(uint8_t value);

/**
 * Pack message ADMode_VECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_ad_mode_vecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_ad_mode_vecu_t *src_p,
    size_t size);

/**
 * Unpack message ADMode_VECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_ad_mode_vecu_unpack(
    struct pcan_h19_e_ad_mode_vecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ad_mode_vecu_ad_mode_of_vecu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ad_mode_vecu_ad_mode_of_vecu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ad_mode_vecu_ad_mode_of_vecu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ad_mode_vecu_creepstate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ad_mode_vecu_creepstate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ad_mode_vecu_creepstate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ad_mode_vecu_auxiliary_braking_hand_lever_station_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ad_mode_vecu_auxiliary_braking_hand_lever_station_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ad_mode_vecu_auxiliary_braking_hand_lever_station_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ad_mode_vecu_acc_pedal_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ad_mode_vecu_acc_pedal_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ad_mode_vecu_acc_pedal_pos_is_in_range(uint8_t value);

/**
 * Pack message DM1_VECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_dm1_vecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_dm1_vecu_t *src_p,
    size_t size);

/**
 * Unpack message DM1_VECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_dm1_vecu_unpack(
    struct pcan_h19_e_dm1_vecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_protect_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_protect_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_protect_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_amber_warn_lamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_amber_warn_lamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_amber_warn_lamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_red_stop_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_red_stop_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_red_stop_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_malfunction_ind_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_malfunction_ind_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_malfunction_ind_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_spn_least_byte_spn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_spn_least_byte_spn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_spn_least_byte_spn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_spn_second_byte_spn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_spn_second_byte_spn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_spn_second_byte_spn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_fmi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_fmi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_fmi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_spn_3_most_significant_bits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_spn_3_most_significant_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_spn_3_most_significant_bits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_oc_curr_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_oc_curr_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_oc_curr_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_vecu_spn_conversion_method_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_vecu_spn_conversion_method_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_vecu_spn_conversion_method_is_in_range(uint8_t value);

/**
 * Pack message DM1_EECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_dm1_eecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_dm1_eecu_t *src_p,
    size_t size);

/**
 * Unpack message DM1_EECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_dm1_eecu_unpack(
    struct pcan_h19_e_dm1_eecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_protect_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_protect_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_protect_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_amber_warn_lamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_amber_warn_lamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_amber_warn_lamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_red_stop_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_red_stop_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_red_stop_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_malfunction_ind_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_malfunction_ind_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_malfunction_ind_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_spn_least_byte_spn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_spn_least_byte_spn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_spn_least_byte_spn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_spn_second_byte_spn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_spn_second_byte_spn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_spn_second_byte_spn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_fmi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_fmi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_fmi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_spn_3_most_significant_bits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_spn_3_most_significant_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_spn_3_most_significant_bits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_oc_curr_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_oc_curr_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_oc_curr_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_eecu_spn_conversion_method_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_eecu_spn_conversion_method_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_eecu_spn_conversion_method_is_in_range(uint8_t value);

/**
 * Pack message EEC1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_eec1_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_eec1_t *src_p,
    size_t size);

/**
 * Unpack message EEC1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_eec1_unpack(
    struct pcan_h19_e_eec1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec1_enginetorquemode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec1_enginetorquemode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec1_enginetorquemode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec1_actual_eng_percent_torq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec1_actual_eng_percent_torq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec1_actual_eng_percent_torq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec1_driver_jsdemand_eng_per_torq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec1_driver_jsdemand_eng_per_torq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec1_driver_jsdemand_eng_per_torq_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec1_actualengine_percenttorque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec1_actualengine_percenttorque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec1_actualengine_percenttorque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_eec1_enginespeed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec1_enginespeed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec1_enginespeed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec1_source_address_control_device_eng_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec1_source_address_control_device_eng_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec1_source_address_control_device_eng_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec1_enginedemand_percenttorque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec1_enginedemand_percenttorque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec1_enginedemand_percenttorque_is_in_range(uint8_t value);

/**
 * Pack message EEC2_VECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_eec2_vecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_eec2_vecu_t *src_p,
    size_t size);

/**
 * Unpack message EEC2_VECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_eec2_vecu_unpack(
    struct pcan_h19_e_eec2_vecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec2_vecu_ap_kickdown_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec2_vecu_ap_kickdown_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec2_vecu_ap_kickdown_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec2_vecu_acc_pedal_pos_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec2_vecu_acc_pedal_pos_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec2_vecu_acc_pedal_pos_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec2_vecu_actu_max_available_eng_pcnt_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec2_vecu_actu_max_available_eng_pcnt_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec2_vecu_actu_max_available_eng_pcnt_torque_is_in_range(uint8_t value);

/**
 * Pack message EEC3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_eec3_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_eec3_t *src_p,
    size_t size);

/**
 * Unpack message EEC3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_eec3_unpack(
    struct pcan_h19_e_eec3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec3_nominal_friction_percent_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec3_nominal_friction_percent_torque_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec3_nominal_friction_percent_torque_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_eec3_estimtd_eng_parasitic_losses_per_trq_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_eec3_estimtd_eng_parasitic_losses_per_trq_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_eec3_estimtd_eng_parasitic_losses_per_trq_is_in_range(uint8_t value);

/**
 * Pack message EC1_EECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_ec1_eecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_ec1_eecu_t *src_p,
    size_t size);

/**
 * Unpack message EC1_EECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_ec1_eecu_unpack(
    struct pcan_h19_e_ec1_eecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_speed_at_idle_point1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_speed_at_idle_point1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_speed_at_idle_point1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_percent_torque_at_idle_point1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_percent_torque_at_idle_point1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_percent_torque_at_idle_point1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_speed_at_point2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_speed_at_point2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_speed_at_point2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_percent_torque_at_point2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_percent_torque_at_point2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_percent_torque_at_point2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_speed_at_point3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_speed_at_point3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_speed_at_point3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_percent_torque_at_point3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_percent_torque_at_point3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_percent_torque_at_point3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_speed_at_point4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_speed_at_point4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_speed_at_point4_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_percent_torque_at_point4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_percent_torque_at_point4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_percent_torque_at_point4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_speed_at_point5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_speed_at_point5_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_speed_at_point5_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_percent_torque_at_point5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_percent_torque_at_point5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_percent_torque_at_point5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_speed_at_high_idle_point6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_speed_at_high_idle_point6_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_speed_at_high_idle_point6_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_gain_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_gain_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_gain_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_reference_torque_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_reference_torque_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_reference_torque_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_mx_mmentary_override_speed_point7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_mx_mmentary_override_speed_point7_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_mx_mmentary_override_speed_point7_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_max_momentary_override_time_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_max_momentary_override_time_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_max_momentary_override_time_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_rqstd_speed_ctrl_range_lower_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_rqstd_speed_ctrl_range_lower_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_rqstd_speed_ctrl_range_lower_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_rqstd_speed_ctrl_range_upper_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_rqstd_speed_ctrl_range_upper_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_rqstd_speed_ctrl_range_upper_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_rqstd_trque_ctrl_range_lower_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_rqstd_trque_ctrl_range_lower_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_rqstd_trque_ctrl_range_lower_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ec1_eecu_eng_rqstd_trque_ctrl_range_upper_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_rqstd_trque_ctrl_range_upper_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_rqstd_trque_ctrl_range_upper_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_ex_rng_rqstd_spd_ctrl_rng_uppr_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_ex_rng_rqstd_spd_ctrl_rng_uppr_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_ex_rng_rqstd_spd_ctrl_rng_uppr_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_moment_of_inertia_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_moment_of_inertia_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_moment_of_inertia_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ec1_eecu_eng_default_torque_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ec1_eecu_eng_default_torque_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ec1_eecu_eng_default_torque_limit_is_in_range(uint16_t value);

/**
 * Pack message TPCM_E_EECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_tpcm_e_eecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_tpcm_e_eecu_t *src_p,
    size_t size);

/**
 * Unpack message TPCM_E_EECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_tpcm_e_eecu_unpack(
    struct pcan_h19_e_tpcm_e_eecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tpcm_e_eecu_control_byte_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tpcm_e_eecu_control_byte_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tpcm_e_eecu_control_byte_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_tpcm_e_eecu_total_number_of_bbytes_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tpcm_e_eecu_total_number_of_bbytes_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tpcm_e_eecu_total_number_of_bbytes_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tpcm_e_eecu_total_number_of_packets_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tpcm_e_eecu_total_number_of_packets_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tpcm_e_eecu_total_number_of_packets_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t pcan_h19_e_tpcm_e_eecu_parameter_group_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tpcm_e_eecu_parameter_group_number_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tpcm_e_eecu_parameter_group_number_is_in_range(uint32_t value);

/**
 * Pack message TPDT_E_EECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_tpdt_e_eecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_tpdt_e_eecu_t *src_p,
    size_t size);

/**
 * Unpack message TPDT_E_EECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_tpdt_e_eecu_unpack(
    struct pcan_h19_e_tpdt_e_eecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tpdt_e_eecu_sequence_number_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tpdt_e_eecu_sequence_number_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tpdt_e_eecu_sequence_number_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t pcan_h19_e_tpdt_e_eecu_packetised_data_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tpdt_e_eecu_packetised_data_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tpdt_e_eecu_packetised_data_is_in_range(uint64_t value);

/**
 * Pack message CCVS_VECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_ccvs_vecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_ccvs_vecu_t *src_p,
    size_t size);

/**
 * Unpack message CCVS_VECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_ccvs_vecu_unpack(
    struct pcan_h19_e_ccvs_vecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_two_spd_axle_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_two_spd_axle_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_two_spd_axle_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_ccvs_vecu_wheel_based_veh_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_wheel_based_veh_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_wheel_based_veh_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cruise_ctrl_active_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cruise_ctrl_active_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cruise_ctrl_active_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cruise_ctrl_enable_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cruise_ctrl_enable_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cruise_ctrl_enable_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_service_brake_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_service_brake_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_service_brake_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cltch_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cltch_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cltch_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cruise_ctrl_set_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cruise_ctrl_set_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cruise_ctrl_set_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cruise_ctrl_coast_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cruise_ctrl_coast_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cruise_ctrl_coast_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cruise_ctrl_resume_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cruise_ctrl_resume_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cruise_ctrl_resume_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cruise_ctrl_acc_swt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cruise_ctrl_acc_swt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cruise_ctrl_acc_swt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cruise_ctrl_set_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cruise_ctrl_set_spd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cruise_ctrl_set_spd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_pto_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_pto_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_pto_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_cruise_ctrl_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_cruise_ctrl_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_cruise_ctrl_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_ccvs_msg_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_ccvs_msg_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_ccvs_msg_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ccvs_vecu_ccvs_check_sum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ccvs_vecu_ccvs_check_sum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ccvs_vecu_ccvs_check_sum_is_in_range(uint8_t value);

/**
 * Pack message RQST_ADECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_rqst_adecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_rqst_adecu_t *src_p,
    size_t size);

/**
 * Unpack message RQST_ADECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_rqst_adecu_unpack(
    struct pcan_h19_e_rqst_adecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint32_t pcan_h19_e_rqst_adecu_requested_pgn_lsb_2nd_msb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_rqst_adecu_requested_pgn_lsb_2nd_msb_decode(uint32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_rqst_adecu_requested_pgn_lsb_2nd_msb_is_in_range(uint32_t value);

/**
 * Pack message VIN_EECU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_vin_eecu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_vin_eecu_t *src_p,
    size_t size);

/**
 * Unpack message VIN_EECU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_vin_eecu_unpack(
    struct pcan_h19_e_vin_eecu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t pcan_h19_e_vin_eecu_vehicle_identification_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_vin_eecu_vehicle_identification_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_vin_eecu_vehicle_identification_is_in_range(uint64_t value);

/**
 * Pack message ETC1_TCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_etc1_tcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_etc1_tcu_t *src_p,
    size_t size);

/**
 * Unpack message ETC1_TCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_etc1_tcu_unpack(
    struct pcan_h19_e_etc1_tcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_trm_drv_engaged_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_trm_drv_engaged_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_trm_drv_engaged_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_trm_trq_conv_lockup_engaged_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_trm_trq_conv_lockup_engaged_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_trm_trq_conv_lockup_engaged_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_trm_shift_proc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_trm_shift_proc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_trm_shift_proc_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_trm_trq_conv_lockup_trs_in_pro_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_trm_trq_conv_lockup_trs_in_pro_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_trm_trq_conv_lockup_trs_in_pro_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_etc1_tcu_etc1_trm_out_spd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_trm_out_spd_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_trm_out_spd_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_per_clut_slip_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_per_clut_slip_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_per_clut_slip_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_eng_mom_over_spd_en_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_eng_mom_over_spd_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_eng_mom_over_spd_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_progres_shift_dis_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_progres_shift_dis_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_progres_shift_dis_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_mom_eng_max_pow_en_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_mom_eng_max_pow_en_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_mom_eng_max_pow_en_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_etc1_tcu_etc1_trm_input_shaft_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_trm_input_shaft_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_trm_input_shaft_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc1_tcu_etc1_src_adr_ctr_dev_tc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc1_tcu_etc1_src_adr_ctr_dev_tc_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc1_tcu_etc1_src_adr_ctr_dev_tc_is_in_range(uint8_t value);

/**
 * Pack message ETC2_TCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_etc2_tcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_etc2_tcu_t *src_p,
    size_t size);

/**
 * Unpack message ETC2_TCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_etc2_tcu_unpack(
    struct pcan_h19_e_etc2_tcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc2_tcu_trans_selected_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc2_tcu_trans_selected_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc2_tcu_trans_selected_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_etc2_tcu_trans_actual_gear_ratio_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc2_tcu_trans_actual_gear_ratio_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc2_tcu_trans_actual_gear_ratio_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc2_tcu_trans_current_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc2_tcu_trans_current_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc2_tcu_trans_current_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_etc2_tcu_trans_requested_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc2_tcu_trans_requested_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc2_tcu_trans_requested_range_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_etc2_tcu_trans_current_range_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc2_tcu_trans_current_range_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc2_tcu_trans_current_range_is_in_range(uint16_t value);

/**
 * Pack message ETC7_TCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_etc7_tcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_etc7_tcu_t *src_p,
    size_t size);

/**
 * Unpack message ETC7_TCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_etc7_tcu_unpack(
    struct pcan_h19_e_etc7_tcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trns_crrent_range_display_blank_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trns_crrent_range_display_blank_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trns_crrent_range_display_blank_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_service_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_service_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_service_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trns_rqsted_range_display_blank_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trns_rqsted_range_display_blank_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trns_rqsted_range_display_blank_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trns_rqsted_range_display_flash_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trns_rqsted_range_display_flash_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trns_rqsted_range_display_flash_state_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_ready_for_brake_release_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_ready_for_brake_release_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_ready_for_brake_release_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_active_shift_console_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_active_shift_console_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_active_shift_console_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_eng_crank_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_eng_crank_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_eng_crank_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_shift_inhibit_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_shift_inhibit_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_shift_inhibit_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode4_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode4_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode4_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode3_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode3_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode3_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode2_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode2_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode2_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode1_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode1_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode1_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_requested_gear_feedback_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_requested_gear_feedback_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_requested_gear_feedback_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode5_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode5_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode5_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode6_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode6_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode6_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode7_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode7_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode7_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode8_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode8_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode8_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trns_rverse_gear_shift_inhibit_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trns_rverse_gear_shift_inhibit_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trns_rverse_gear_shift_inhibit_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_warning_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_warning_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_warning_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode9_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode9_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode9_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_mode10_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_mode10_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_mode10_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_air_supply_press_indicator_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_air_supply_press_indicator_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_air_supply_press_indicator_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_trans_auto_neutral_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_trans_auto_neutral_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_trans_auto_neutral_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_etc7_tcu_manual_mode_ind_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_etc7_tcu_manual_mode_ind_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_etc7_tcu_manual_mode_ind_is_in_range(uint8_t value);

/**
 * Pack message TSC1_TE_TCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_tsc1_te_tcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_tsc1_te_tcu_t *src_p,
    size_t size);

/**
 * Unpack message TSC1_TE_TCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_tsc1_te_tcu_unpack(
    struct pcan_h19_e_tsc1_te_tcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_eng_override_ctrl_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_eng_override_ctrl_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_eng_override_ctrl_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_eng_requested_speed_ctrl_conditions_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_eng_requested_speed_ctrl_conditions_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_eng_requested_speed_ctrl_conditions_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_override_ctrl_mode_priority_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_override_ctrl_mode_priority_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_override_ctrl_mode_priority_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_tsc1_te_tcu_eng_requested_speed_speed_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_eng_requested_speed_speed_limit_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_eng_requested_speed_speed_limit_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_eng_requested_torque_torque_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_eng_requested_torque_torque_limit_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_eng_requested_torque_torque_limit_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_tsc1_trans_rate_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_tsc1_trans_rate_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_tsc1_trans_rate_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_tsc1_ctrl_purpose_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_tsc1_ctrl_purpose_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_tsc1_ctrl_purpose_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_eng_requested_torque_high_resolution_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_eng_requested_torque_high_resolution_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_eng_requested_torque_high_resolution_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_message_counter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_message_counter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_message_counter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tsc1_te_tcu_message_checksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tsc1_te_tcu_message_checksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tsc1_te_tcu_message_checksum_is_in_range(uint8_t value);

/**
 * Pack message DM1_TCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_dm1_tcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_dm1_tcu_t *src_p,
    size_t size);

/**
 * Unpack message DM1_TCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_dm1_tcu_unpack(
    struct pcan_h19_e_dm1_tcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_protect_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_protect_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_protect_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_amber_warn_lamp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_amber_warn_lamp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_amber_warn_lamp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_red_stop_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_red_stop_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_red_stop_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_malfunction_ind_lamp_st_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_malfunction_ind_lamp_st_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_malfunction_ind_lamp_st_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_spn_least_byte_spn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_spn_least_byte_spn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_spn_least_byte_spn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_spn_second_byte_spn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_spn_second_byte_spn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_spn_second_byte_spn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_fmi_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_fmi_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_fmi_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_spn_3_most_significant_bits_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_spn_3_most_significant_bits_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_spn_3_most_significant_bits_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_oc_curr_count_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_oc_curr_count_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_oc_curr_count_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_dm1_tcu_spn_conversion_method_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_dm1_tcu_spn_conversion_method_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_dm1_tcu_spn_conversion_method_is_in_range(uint8_t value);

/**
 * Pack message XBR_ADCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_xbr_adcu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_xbr_adcu_t *src_p,
    size_t size);

/**
 * Unpack message XBR_ADCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_xbr_adcu_unpack(
    struct pcan_h19_e_xbr_adcu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_xbr_adcu_external_acc_demand_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_xbr_adcu_external_acc_demand_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_xbr_adcu_external_acc_demand_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_xbr_adcu_xbrebi_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_xbr_adcu_xbrebi_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_xbr_adcu_xbrebi_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_xbr_adcu_xbr_priority_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_xbr_adcu_xbr_priority_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_xbr_adcu_xbr_priority_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_xbr_adcu_xbr_ctrl_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_xbr_adcu_xbr_ctrl_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_xbr_adcu_xbr_ctrl_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_xbr_adcu_xb_rurgency_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_xbr_adcu_xb_rurgency_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_xbr_adcu_xb_rurgency_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_xbr_adcu_msgcounter_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_xbr_adcu_msgcounter_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_xbr_adcu_msgcounter_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_xbr_adcu_msgchecksum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_xbr_adcu_msgchecksum_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_xbr_adcu_msgchecksum_is_in_range(uint8_t value);

/**
 * Pack message State_SCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_state_scu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_state_scu_t *src_p,
    size_t size);

/**
 * Unpack message State_SCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_state_scu_unpack(
    struct pcan_h19_e_state_scu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_state_scu_shift_handle_current_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_state_scu_shift_handle_current_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_state_scu_shift_handle_current_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_state_scu_ad_mode_of_scu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_state_scu_ad_mode_of_scu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_state_scu_ad_mode_of_scu_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_state_scu_shift_handleposition_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_state_scu_shift_handleposition_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_state_scu_shift_handleposition_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_state_scu_e_p_state_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_state_scu_e_p_state_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_state_scu_e_p_state_is_in_range(uint8_t value);

/**
 * Pack message TC1_SCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_tc1_scu_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_tc1_scu_t *src_p,
    size_t size);

/**
 * Unpack message TC1_SCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_tc1_scu_unpack(
    struct pcan_h19_e_tc1_scu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tc1_scu_transmission_mode2_e_p_mode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tc1_scu_transmission_mode2_e_p_mode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tc1_scu_transmission_mode2_e_p_mode_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_tc1_scu_ad_mode_of_scu_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_tc1_scu_ad_mode_of_scu_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_tc1_scu_ad_mode_of_scu_is_in_range(uint8_t value);

/**
 * Pack message VEP8_IBS1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_vep8_ibs1_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_vep8_ibs1_t *src_p,
    size_t size);

/**
 * Unpack message VEP8_IBS1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_vep8_ibs1_unpack(
    struct pcan_h19_e_vep8_ibs1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_vep8_ibs1_battery1_stateof_charge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_vep8_ibs1_battery1_stateof_charge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_vep8_ibs1_battery1_stateof_charge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_vep8_ibs1_battery1_health_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_vep8_ibs1_battery1_health_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_vep8_ibs1_battery1_health_is_in_range(uint8_t value);

/**
 * Pack message IBSW_IBS1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_ibsw_ibs1_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_ibsw_ibs1_t *src_p,
    size_t size);

/**
 * Unpack message IBSW_IBS1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_ibsw_ibs1_unpack(
    struct pcan_h19_e_ibsw_ibs1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ibsw_ibs1_battery1_soc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ibsw_ibs1_battery1_soc_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ibsw_ibs1_battery1_soc_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ibsw_ibs1_battery1_soh_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ibsw_ibs1_battery1_soh_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ibsw_ibs1_battery1_soh_warning_is_in_range(uint8_t value);

/**
 * Pack message VEP8_IBS2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_vep8_ibs2_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_vep8_ibs2_t *src_p,
    size_t size);

/**
 * Unpack message VEP8_IBS2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_vep8_ibs2_unpack(
    struct pcan_h19_e_vep8_ibs2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pcan_h19_e_vep8_ibs2_battery2_stateof_charge_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_vep8_ibs2_battery2_stateof_charge_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_vep8_ibs2_battery2_stateof_charge_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_vep8_ibs2_battery2_health_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_vep8_ibs2_battery2_health_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_vep8_ibs2_battery2_health_is_in_range(uint8_t value);

/**
 * Pack message IBSW_IBS2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pcan_h19_e_ibsw_ibs2_pack(
    uint8_t *dst_p,
    const struct pcan_h19_e_ibsw_ibs2_t *src_p,
    size_t size);

/**
 * Unpack message IBSW_IBS2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pcan_h19_e_ibsw_ibs2_unpack(
    struct pcan_h19_e_ibsw_ibs2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ibsw_ibs2_battery2_soc_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ibsw_ibs2_battery2_soc_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ibsw_ibs2_battery2_soc_warning_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pcan_h19_e_ibsw_ibs2_battery2_soh_warning_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pcan_h19_e_ibsw_ibs2_battery2_soh_warning_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pcan_h19_e_ibsw_ibs2_battery2_soh_warning_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
