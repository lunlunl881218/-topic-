// Generated by gencpp from file beginner_tutorials/pcanrecv.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_PCANRECV_H
#define BEGINNER_TUTORIALS_MESSAGE_PCANRECV_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/ByteMultiArray.h>

namespace beginner_tutorials
{
template <class ContainerAllocator>
struct pcanrecv_
{
  typedef pcanrecv_<ContainerAllocator> Type;

  pcanrecv_()
    : id(0)
    , fd(0)
    , rtr(0)
    , ext(0)
    , data()
    , brs(0)
    , esi(0)  {
    }
  pcanrecv_(const ContainerAllocator& _alloc)
    : id(0)
    , fd(0)
    , rtr(0)
    , ext(0)
    , data(_alloc)
    , brs(0)
    , esi(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int8_t _fd_type;
  _fd_type fd;

   typedef int8_t _rtr_type;
  _rtr_type rtr;

   typedef int8_t _ext_type;
  _ext_type ext;

   typedef  ::std_msgs::ByteMultiArray_<ContainerAllocator>  _data_type;
  _data_type data;

   typedef int8_t _brs_type;
  _brs_type brs;

   typedef int8_t _esi_type;
  _esi_type esi;





  typedef boost::shared_ptr< ::beginner_tutorials::pcanrecv_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::pcanrecv_<ContainerAllocator> const> ConstPtr;

}; // struct pcanrecv_

typedef ::beginner_tutorials::pcanrecv_<std::allocator<void> > pcanrecv;

typedef boost::shared_ptr< ::beginner_tutorials::pcanrecv > pcanrecvPtr;
typedef boost::shared_ptr< ::beginner_tutorials::pcanrecv const> pcanrecvConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::pcanrecv_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::pcanrecv_<ContainerAllocator1> & lhs, const ::beginner_tutorials::pcanrecv_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.fd == rhs.fd &&
    lhs.rtr == rhs.rtr &&
    lhs.ext == rhs.ext &&
    lhs.data == rhs.data &&
    lhs.brs == rhs.brs &&
    lhs.esi == rhs.esi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::pcanrecv_<ContainerAllocator1> & lhs, const ::beginner_tutorials::pcanrecv_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::pcanrecv_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::pcanrecv_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::pcanrecv_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f8803e66188a1a1a96eed3a485c0207e";
  }

  static const char* value(const ::beginner_tutorials::pcanrecv_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf8803e66188a1a1aULL;
  static const uint64_t static_value2 = 0x96eed3a485c0207eULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/pcanrecv";
  }

  static const char* value(const ::beginner_tutorials::pcanrecv_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"byte fd\n"
"byte rtr\n"
"byte ext\n"
"std_msgs/ByteMultiArray data\n"
"byte brs\n"
"byte esi\n"
"================================================================================\n"
"MSG: std_msgs/ByteMultiArray\n"
"# Please look at the MultiArrayLayout message definition for\n"
"# documentation on all multiarrays.\n"
"\n"
"MultiArrayLayout  layout        # specification of data layout\n"
"byte[]            data          # array of data\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayLayout\n"
"# The multiarray declares a generic multi-dimensional array of a\n"
"# particular data type.  Dimensions are ordered from outer most\n"
"# to inner most.\n"
"\n"
"MultiArrayDimension[] dim # Array of dimension properties\n"
"uint32 data_offset        # padding elements at front of data\n"
"\n"
"# Accessors should ALWAYS be written in terms of dimension stride\n"
"# and specified outer-most dimension first.\n"
"# \n"
"# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n"
"#\n"
"# A standard, 3-channel 640x480 image with interleaved color channels\n"
"# would be specified as:\n"
"#\n"
"# dim[0].label  = \"height\"\n"
"# dim[0].size   = 480\n"
"# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n"
"# dim[1].label  = \"width\"\n"
"# dim[1].size   = 640\n"
"# dim[1].stride = 3*640 = 1920\n"
"# dim[2].label  = \"channel\"\n"
"# dim[2].size   = 3\n"
"# dim[2].stride = 3\n"
"#\n"
"# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/MultiArrayDimension\n"
"string label   # label of given dimension\n"
"uint32 size    # size of given dimension (in type units)\n"
"uint32 stride  # stride of given dimension\n"
;
  }

  static const char* value(const ::beginner_tutorials::pcanrecv_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.fd);
      stream.next(m.rtr);
      stream.next(m.ext);
      stream.next(m.data);
      stream.next(m.brs);
      stream.next(m.esi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pcanrecv_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::pcanrecv_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::pcanrecv_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "fd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.fd);
    s << indent << "rtr: ";
    Printer<int8_t>::stream(s, indent + "  ", v.rtr);
    s << indent << "ext: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ext);
    s << indent << "data: ";
    s << std::endl;
    Printer< ::std_msgs::ByteMultiArray_<ContainerAllocator> >::stream(s, indent + "  ", v.data);
    s << indent << "brs: ";
    Printer<int8_t>::stream(s, indent + "  ", v.brs);
    s << indent << "esi: ";
    Printer<int8_t>::stream(s, indent + "  ", v.esi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_PCANRECV_H
